/****************************************************************************
** Meta object code from reading C++ file 'qtTestsInter2.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'qtTestsInter2.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_QTestInter2_t {
    QByteArrayData data[78];
    char stringdata0[1111];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_QTestInter2_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_QTestInter2_t qt_meta_stringdata_QTestInter2 = {
    {
QT_MOC_LITERAL(0, 0, 11), // "QTestInter2"
QT_MOC_LITERAL(1, 12, 12), // "initTestCase"
QT_MOC_LITERAL(2, 25, 0), // ""
QT_MOC_LITERAL(3, 26, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 42, 15), // "testErrors_data"
QT_MOC_LITERAL(5, 58, 10), // "testErrors"
QT_MOC_LITERAL(6, 69, 14), // "testInter_data"
QT_MOC_LITERAL(7, 84, 9), // "testInter"
QT_MOC_LITERAL(8, 94, 16), // "testParList_data"
QT_MOC_LITERAL(9, 111, 11), // "testParList"
QT_MOC_LITERAL(10, 123, 15), // "testExtern_data"
QT_MOC_LITERAL(11, 139, 10), // "testExtern"
QT_MOC_LITERAL(12, 150, 20), // "testExternDelay_data"
QT_MOC_LITERAL(13, 171, 15), // "testExternDelay"
QT_MOC_LITERAL(14, 187, 17), // "testSpecPass_data"
QT_MOC_LITERAL(15, 205, 12), // "testSpecPass"
QT_MOC_LITERAL(16, 218, 19), // "testExternPass_data"
QT_MOC_LITERAL(17, 238, 14), // "testExternPass"
QT_MOC_LITERAL(18, 253, 18), // "testAsyncList_data"
QT_MOC_LITERAL(19, 272, 13), // "testAsyncList"
QT_MOC_LITERAL(20, 286, 13), // "testFact_data"
QT_MOC_LITERAL(21, 300, 8), // "testFact"
QT_MOC_LITERAL(22, 309, 13), // "testSort_data"
QT_MOC_LITERAL(23, 323, 8), // "testSort"
QT_MOC_LITERAL(24, 332, 17), // "testTailFact_data"
QT_MOC_LITERAL(25, 350, 12), // "testTailFact"
QT_MOC_LITERAL(26, 363, 20), // "testTailReverse_data"
QT_MOC_LITERAL(27, 384, 15), // "testTailReverse"
QT_MOC_LITERAL(28, 400, 15), // "testVecSum_data"
QT_MOC_LITERAL(29, 416, 10), // "testVecSum"
QT_MOC_LITERAL(30, 427, 14), // "testNdAbs_data"
QT_MOC_LITERAL(31, 442, 9), // "testNdAbs"
QT_MOC_LITERAL(32, 452, 14), // "testHanoy_data"
QT_MOC_LITERAL(33, 467, 9), // "testHanoy"
QT_MOC_LITERAL(34, 477, 14), // "testQuadr_data"
QT_MOC_LITERAL(35, 492, 9), // "testQuadr"
QT_MOC_LITERAL(36, 502, 18), // "testPointList_data"
QT_MOC_LITERAL(37, 521, 13), // "testPointList"
QT_MOC_LITERAL(38, 535, 16), // "test2Points_data"
QT_MOC_LITERAL(39, 552, 11), // "test2Points"
QT_MOC_LITERAL(40, 564, 10), // "testFilter"
QT_MOC_LITERAL(41, 575, 15), // "testFilter_data"
QT_MOC_LITERAL(42, 591, 9), // "testFolds"
QT_MOC_LITERAL(43, 601, 14), // "testFolds_data"
QT_MOC_LITERAL(44, 616, 12), // "testGenerate"
QT_MOC_LITERAL(45, 629, 17), // "testGenerate_data"
QT_MOC_LITERAL(46, 647, 11), // "testUncurry"
QT_MOC_LITERAL(47, 659, 16), // "testUncurry_data"
QT_MOC_LITERAL(48, 676, 13), // "testVecEquals"
QT_MOC_LITERAL(49, 690, 18), // "testVecEquals_data"
QT_MOC_LITERAL(50, 709, 10), // "testIssue6"
QT_MOC_LITERAL(51, 720, 15), // "testIssue6_data"
QT_MOC_LITERAL(52, 736, 10), // "testIssue9"
QT_MOC_LITERAL(53, 747, 15), // "testIssue9_data"
QT_MOC_LITERAL(54, 763, 11), // "testIssue18"
QT_MOC_LITERAL(55, 775, 16), // "testIssue18_data"
QT_MOC_LITERAL(56, 792, 11), // "testIssue22"
QT_MOC_LITERAL(57, 804, 16), // "testIssue22_data"
QT_MOC_LITERAL(58, 821, 11), // "testIssue23"
QT_MOC_LITERAL(59, 833, 16), // "testIssue23_data"
QT_MOC_LITERAL(60, 850, 11), // "testIssue24"
QT_MOC_LITERAL(61, 862, 16), // "testIssue24_data"
QT_MOC_LITERAL(62, 879, 11), // "testIssue26"
QT_MOC_LITERAL(63, 891, 16), // "testIssue26_data"
QT_MOC_LITERAL(64, 908, 11), // "testIssue28"
QT_MOC_LITERAL(65, 920, 16), // "testIssue28_data"
QT_MOC_LITERAL(66, 937, 11), // "testIssue29"
QT_MOC_LITERAL(67, 949, 16), // "testIssue29_data"
QT_MOC_LITERAL(68, 966, 11), // "testIssue30"
QT_MOC_LITERAL(69, 978, 16), // "testIssue30_data"
QT_MOC_LITERAL(70, 995, 11), // "testIssue35"
QT_MOC_LITERAL(71, 1007, 16), // "testIssue35_data"
QT_MOC_LITERAL(72, 1024, 11), // "testIssue37"
QT_MOC_LITERAL(73, 1036, 16), // "testIssue37_data"
QT_MOC_LITERAL(74, 1053, 11), // "testIssue38"
QT_MOC_LITERAL(75, 1065, 16), // "testIssue38_data"
QT_MOC_LITERAL(76, 1082, 11), // "testIssue39"
QT_MOC_LITERAL(77, 1094, 16) // "testIssue39_data"

    },
    "QTestInter2\0initTestCase\0\0cleanupTestCase\0"
    "testErrors_data\0testErrors\0testInter_data\0"
    "testInter\0testParList_data\0testParList\0"
    "testExtern_data\0testExtern\0"
    "testExternDelay_data\0testExternDelay\0"
    "testSpecPass_data\0testSpecPass\0"
    "testExternPass_data\0testExternPass\0"
    "testAsyncList_data\0testAsyncList\0"
    "testFact_data\0testFact\0testSort_data\0"
    "testSort\0testTailFact_data\0testTailFact\0"
    "testTailReverse_data\0testTailReverse\0"
    "testVecSum_data\0testVecSum\0testNdAbs_data\0"
    "testNdAbs\0testHanoy_data\0testHanoy\0"
    "testQuadr_data\0testQuadr\0testPointList_data\0"
    "testPointList\0test2Points_data\0"
    "test2Points\0testFilter\0testFilter_data\0"
    "testFolds\0testFolds_data\0testGenerate\0"
    "testGenerate_data\0testUncurry\0"
    "testUncurry_data\0testVecEquals\0"
    "testVecEquals_data\0testIssue6\0"
    "testIssue6_data\0testIssue9\0testIssue9_data\0"
    "testIssue18\0testIssue18_data\0testIssue22\0"
    "testIssue22_data\0testIssue23\0"
    "testIssue23_data\0testIssue24\0"
    "testIssue24_data\0testIssue26\0"
    "testIssue26_data\0testIssue28\0"
    "testIssue28_data\0testIssue29\0"
    "testIssue29_data\0testIssue30\0"
    "testIssue30_data\0testIssue35\0"
    "testIssue35_data\0testIssue37\0"
    "testIssue37_data\0testIssue38\0"
    "testIssue38_data\0testIssue39\0"
    "testIssue39_data"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_QTestInter2[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      76,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  394,    2, 0x08 /* Private */,
       3,    0,  395,    2, 0x08 /* Private */,
       4,    0,  396,    2, 0x08 /* Private */,
       5,    0,  397,    2, 0x08 /* Private */,
       6,    0,  398,    2, 0x08 /* Private */,
       7,    0,  399,    2, 0x08 /* Private */,
       8,    0,  400,    2, 0x08 /* Private */,
       9,    0,  401,    2, 0x08 /* Private */,
      10,    0,  402,    2, 0x08 /* Private */,
      11,    0,  403,    2, 0x08 /* Private */,
      12,    0,  404,    2, 0x08 /* Private */,
      13,    0,  405,    2, 0x08 /* Private */,
      14,    0,  406,    2, 0x08 /* Private */,
      15,    0,  407,    2, 0x08 /* Private */,
      16,    0,  408,    2, 0x08 /* Private */,
      17,    0,  409,    2, 0x08 /* Private */,
      18,    0,  410,    2, 0x08 /* Private */,
      19,    0,  411,    2, 0x08 /* Private */,
      20,    0,  412,    2, 0x08 /* Private */,
      21,    0,  413,    2, 0x08 /* Private */,
      22,    0,  414,    2, 0x08 /* Private */,
      23,    0,  415,    2, 0x08 /* Private */,
      24,    0,  416,    2, 0x08 /* Private */,
      25,    0,  417,    2, 0x08 /* Private */,
      26,    0,  418,    2, 0x08 /* Private */,
      27,    0,  419,    2, 0x08 /* Private */,
      28,    0,  420,    2, 0x08 /* Private */,
      29,    0,  421,    2, 0x08 /* Private */,
      30,    0,  422,    2, 0x08 /* Private */,
      31,    0,  423,    2, 0x08 /* Private */,
      32,    0,  424,    2, 0x08 /* Private */,
      33,    0,  425,    2, 0x08 /* Private */,
      34,    0,  426,    2, 0x08 /* Private */,
      35,    0,  427,    2, 0x08 /* Private */,
      36,    0,  428,    2, 0x08 /* Private */,
      37,    0,  429,    2, 0x08 /* Private */,
      38,    0,  430,    2, 0x08 /* Private */,
      39,    0,  431,    2, 0x08 /* Private */,
      40,    0,  432,    2, 0x08 /* Private */,
      41,    0,  433,    2, 0x08 /* Private */,
      42,    0,  434,    2, 0x08 /* Private */,
      43,    0,  435,    2, 0x08 /* Private */,
      44,    0,  436,    2, 0x08 /* Private */,
      45,    0,  437,    2, 0x08 /* Private */,
      46,    0,  438,    2, 0x08 /* Private */,
      47,    0,  439,    2, 0x08 /* Private */,
      48,    0,  440,    2, 0x08 /* Private */,
      49,    0,  441,    2, 0x08 /* Private */,
      50,    0,  442,    2, 0x08 /* Private */,
      51,    0,  443,    2, 0x08 /* Private */,
      52,    0,  444,    2, 0x08 /* Private */,
      53,    0,  445,    2, 0x08 /* Private */,
      54,    0,  446,    2, 0x08 /* Private */,
      55,    0,  447,    2, 0x08 /* Private */,
      56,    0,  448,    2, 0x08 /* Private */,
      57,    0,  449,    2, 0x08 /* Private */,
      58,    0,  450,    2, 0x08 /* Private */,
      59,    0,  451,    2, 0x08 /* Private */,
      60,    0,  452,    2, 0x08 /* Private */,
      61,    0,  453,    2, 0x08 /* Private */,
      62,    0,  454,    2, 0x08 /* Private */,
      63,    0,  455,    2, 0x08 /* Private */,
      64,    0,  456,    2, 0x08 /* Private */,
      65,    0,  457,    2, 0x08 /* Private */,
      66,    0,  458,    2, 0x08 /* Private */,
      67,    0,  459,    2, 0x08 /* Private */,
      68,    0,  460,    2, 0x08 /* Private */,
      69,    0,  461,    2, 0x08 /* Private */,
      70,    0,  462,    2, 0x08 /* Private */,
      71,    0,  463,    2, 0x08 /* Private */,
      72,    0,  464,    2, 0x08 /* Private */,
      73,    0,  465,    2, 0x08 /* Private */,
      74,    0,  466,    2, 0x08 /* Private */,
      75,    0,  467,    2, 0x08 /* Private */,
      76,    0,  468,    2, 0x08 /* Private */,
      77,    0,  469,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void QTestInter2::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<QTestInter2 *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->testErrors_data(); break;
        case 3: _t->testErrors(); break;
        case 4: _t->testInter_data(); break;
        case 5: _t->testInter(); break;
        case 6: _t->testParList_data(); break;
        case 7: _t->testParList(); break;
        case 8: _t->testExtern_data(); break;
        case 9: _t->testExtern(); break;
        case 10: _t->testExternDelay_data(); break;
        case 11: _t->testExternDelay(); break;
        case 12: _t->testSpecPass_data(); break;
        case 13: _t->testSpecPass(); break;
        case 14: _t->testExternPass_data(); break;
        case 15: _t->testExternPass(); break;
        case 16: _t->testAsyncList_data(); break;
        case 17: _t->testAsyncList(); break;
        case 18: _t->testFact_data(); break;
        case 19: _t->testFact(); break;
        case 20: _t->testSort_data(); break;
        case 21: _t->testSort(); break;
        case 22: _t->testTailFact_data(); break;
        case 23: _t->testTailFact(); break;
        case 24: _t->testTailReverse_data(); break;
        case 25: _t->testTailReverse(); break;
        case 26: _t->testVecSum_data(); break;
        case 27: _t->testVecSum(); break;
        case 28: _t->testNdAbs_data(); break;
        case 29: _t->testNdAbs(); break;
        case 30: _t->testHanoy_data(); break;
        case 31: _t->testHanoy(); break;
        case 32: _t->testQuadr_data(); break;
        case 33: _t->testQuadr(); break;
        case 34: _t->testPointList_data(); break;
        case 35: _t->testPointList(); break;
        case 36: _t->test2Points_data(); break;
        case 37: _t->test2Points(); break;
        case 38: _t->testFilter(); break;
        case 39: _t->testFilter_data(); break;
        case 40: _t->testFolds(); break;
        case 41: _t->testFolds_data(); break;
        case 42: _t->testGenerate(); break;
        case 43: _t->testGenerate_data(); break;
        case 44: _t->testUncurry(); break;
        case 45: _t->testUncurry_data(); break;
        case 46: _t->testVecEquals(); break;
        case 47: _t->testVecEquals_data(); break;
        case 48: _t->testIssue6(); break;
        case 49: _t->testIssue6_data(); break;
        case 50: _t->testIssue9(); break;
        case 51: _t->testIssue9_data(); break;
        case 52: _t->testIssue18(); break;
        case 53: _t->testIssue18_data(); break;
        case 54: _t->testIssue22(); break;
        case 55: _t->testIssue22_data(); break;
        case 56: _t->testIssue23(); break;
        case 57: _t->testIssue23_data(); break;
        case 58: _t->testIssue24(); break;
        case 59: _t->testIssue24_data(); break;
        case 60: _t->testIssue26(); break;
        case 61: _t->testIssue26_data(); break;
        case 62: _t->testIssue28(); break;
        case 63: _t->testIssue28_data(); break;
        case 64: _t->testIssue29(); break;
        case 65: _t->testIssue29_data(); break;
        case 66: _t->testIssue30(); break;
        case 67: _t->testIssue30_data(); break;
        case 68: _t->testIssue35(); break;
        case 69: _t->testIssue35_data(); break;
        case 70: _t->testIssue37(); break;
        case 71: _t->testIssue37_data(); break;
        case 72: _t->testIssue38(); break;
        case 73: _t->testIssue38_data(); break;
        case 74: _t->testIssue39(); break;
        case 75: _t->testIssue39_data(); break;
        default: ;
        }
    }
    (void)_a;
}

QT_INIT_METAOBJECT const QMetaObject QTestInter2::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_QTestInter2.data,
    qt_meta_data_QTestInter2,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *QTestInter2::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *QTestInter2::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_QTestInter2.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int QTestInter2::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 76)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 76;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 76)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 76;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
